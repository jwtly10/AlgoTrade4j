name: Main Branch CI - Run Tests and Deploy

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ssh-key: ${{ secrets.SUBMODULE_SSH_KEY }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with Maven
        run: mvn clean test

  deploy:
    runs-on: ubuntu-latest

    needs: test

    steps:
      - name: Configure Git
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "GitHub Actions"
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ssh-key: ${{ secrets.SUBMODULE_SSH_KEY }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Java Application
        run: mvn clean package -DskipTests

      - name: Build Frontend react app
        run: |
          cd algotrade4j-frontend
          npm install
          npm run build

      - name: Upload java artifacts to remote
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          source: "algotrade4j-api/target/*.jar"
          target: "/opt/algotrade4j"

      - name: Upload React build to remote
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          source: "algotrade4j-frontend/dist/*"
          target: "/opt/algotrade4j"

      - name: Upload dockerfiles to remote
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          source: "Dockerfile, docker-compose.yml, algotrade4j-frontend/Dockerfile"
          target: "/opt/algotrade4j"

      - name: Upload Nginx configurations to remote
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          source: "infra-config/nginx.prod.conf, infra-config/frontend-nginx.conf"
          target: "/opt/algotrade4j"

      - name: Configure and reload Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo mv /opt/algotrade4j/infra-config/nginx.prod.conf /etc/nginx/sites-available/algotrade4j
            sudo ln -sf /etc/nginx/sites-available/algotrade4j /etc/nginx/sites-enabled/
            sudo nginx -t
            sudo systemctl reload nginx

      - name: Run docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          script: |
            cd /opt/algotrade4j &&
            OANDA_API_URL=${{vars.OANDA_API_URL}} \
            OANDA_API_KEY=${{secrets.OANDA_API_KEY}} \
            OANDA_ACCOUNT_ID=${{secrets.OANDA_ACCOUNT_ID}} \
            JWT_SECRET=${{secrets.JWT_SECRET}} \
            SPRING_DATASOURCE_URL=${{secrets.SPRING_DATASOURCE_URL}} \
            SPRING_DATASOURCE_USERNAME=${{secrets.SPRING_DATASOURCE_USERNAME}} \
            SPRING_DATASOURCE_PASSWORD=${{secrets.SPRING_DATASOURCE_PASSWORD}} \
            ADDITIONAL_JAVA_OPTS=${{vars.ADDITIONAL_JAVA_OPTS}} \
            DD_API_KEY=${{secrets.DD_API_KEY}} \
            VITE_NODE_ENV=${{vars.VITE_NODE_ENV}} \
            VITE_ENABLE_DEBUG_LOGS=${{vars.VITE_ENABLE_DEBUG_LOGS}} \
            VITE_API_URL=${{vars.VITE_API_URL}} \
            VITE_ENABLE_SIGNUP=${{vars.VITE_ENABLE_SIGNUP}} \
            docker compose --profile prod up -d --build